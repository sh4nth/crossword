{"version":3,"sources":["Square.tsx","Crossword.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["clueStyle","display","alignItems","justifyContent","fill","fontSize","textStyle","Square","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","letter","inherits","createClass","key","value","fillable","svgElements","push","react_default","a","createElement","id","x","y","width","height","style","stroke","strokeWidth","clueNumber","Component","shouldBeBlack","i","j","N","containerStyle","size","window","innerWidth","innerHeight","Crossword","nameInput","boxes","row","state","point","isSolver","isHorizontal","event","floor","clientX","currentTarget","clientWidth","clientY","clientHeight","setState","cloneDeep","focus","p","_this2","pressedKey","length","Error","toUpperCase","clonedBoxes","getNextPoint","left","top","position","background","border","textAlign","_this3","className","tabIndex","onClick","e","viewBox","xmlns","map","b","Square_Square","ref","input","maxLength","onKeyUp","getHiddenBoxStyle","App","apply","arguments","Crossword_Crossword","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b3b6526.chunk.js","sourcesContent":["import React, { Component, CSSProperties, SVGAttributes, KeyboardEvent } from 'react';\n\n\nexport type BoxProps = {\n    x: number\n    y: number\n    id: string\n    letter: string\n    clueNumber: string\n    fillable: boolean\n}\n\ntype State = {\n    fillable: boolean\n}\n\nexport const boxSize = 40;\n\nexport function getStyle(fillable: boolean): CSSProperties {\n    return {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fill: fillable ? \"white\" : \"black\",\n        stroke: 'rgb(55,55,55)',\n        strokeWidth: 1,\n    };\n}\n\nconst clueStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '10px',\n};\n\nconst textStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '20px'\n};\nconst groupStyle = {\n    pointerEvents: 'bounding-box'\n};\nexport class Square extends Component<BoxProps, {}> {\n    constructor(props: BoxProps) {\n        super(props);\n        console.log(\"Construct <\" + this.props.letter + \">\");\n    }\n\n    // public onClick() {\n    //     this.setState((state) => {\n    //         return { fillable: !state.fillable };\n    //     });\n    // }\n\n    public render() {\n        let svgElements = [];\n        svgElements.push(\n            <rect\n            key={\"box\" + this.props.id}\n                x={this.props.x * boxSize}\n                y={this.props.y * boxSize}\n                width={boxSize}\n                height={boxSize}\n                style={getStyle(this.props.fillable)}>\n            </rect>);\n        if (this.props.fillable) {\n            svgElements.push(\n                <text\n                    key={\"letter\" + this.props.id}\n                    x={(this.props.x + 0.35) * boxSize}\n                    y={(this.props.y + 0.65) * boxSize}\n                    style={textStyle}>{this.props.letter}\n                </text>);\n            if (this.props.clueNumber != \"\") {\n                svgElements.push(\n                    <text\n                        key={\"clue\" + this.props.id}\n                        x={this.props.x * boxSize + 2}\n                        y={this.props.y * boxSize + 10}\n                        style={clueStyle}>{this.props.clueNumber}\n                    </text>);\n            }\n        }\n        return (<g key={this.props.id}>{svgElements}</g>);\n    }\n}\n","import React, { Component, KeyboardEvent, MouseEvent, createRef, CSSProperties } from 'react';\nimport { Square, boxSize, BoxProps } from \"./Square\";\nimport {cloneDeep, floor, min} from 'lodash';\n\ntype Point = {\n    i: number,\n    j: number,\n}\n\ntype State = {\n    boxes: Array<Array<BoxProps>>,\n    point: Point,\n    isSolver: boolean,\n    isHorizontal: boolean,\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    return !(i%2 == 1 && j%2 == 1)\n}\n\nconst N = 5;\n\nfunction containerStyle() {\n    let size = window.innerWidth > window.innerHeight ? window.innerHeight : window.innerWidth;\n    return {\n        width: size,\n        height: size,\n    }\n}\n\nexport class Crossword extends Component<{}, State> {\n    nameInput: HTMLInputElement | null | undefined;\n    public onClick(event: MouseEvent) {\n        let i = floor(N * event.clientX / event.currentTarget.clientWidth);\n        let j = floor(N * event.clientY / event.currentTarget.clientHeight);\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            // clonedBoxes[i][j].fillable = !clonedBoxes[i][j].fillable;\n            return {boxes:clonedBoxes, point:{i: i, j: j}};\n        });\n        console.log(i + \",\" + j);\n        console.log(event.clientX + \", \" + event.clientY);\n        if (this.nameInput) { \n            this.nameInput.focus();\n        }\n    }\n\n    getNextPoint(p: Point) {\n        if (p.i<0 || p.j < 0) {\n            return p;\n        }\n        if (this.state.isHorizontal) {\n            if (p.i < N-1) {\n                return {i: p.i+1, j: p.j};\n            } else {\n                return p;\n            }\n        } else {\n            if (p.j < N-1) {\n                return {i: p.i, j: p.j+1};\n            } else {\n                return p;\n            }\n        }\n    }\n\n    public onKeyUp(key: KeyboardEvent) {\n        let i = this.state.point.i;\n        let j = this.state.point.j;\n        if (i < 0 || j < 0 || !this.state.boxes[i][j].fillable) {\n            console.log(\"Ignoring keyEvent \" + key.key);\n            return;\n        }\n        let pressedKey = key.key\n        if (pressedKey.length > 1) {\n            throw new Error(\"Strange key: \" + pressedKey)\n        } \n        pressedKey = pressedKey.toUpperCase();\n        if (pressedKey > 'Z' || pressedKey < 'A') {\n            console.log(\"Ignoring key \" + pressedKey);\n            return;\n        }\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            clonedBoxes[state.point.i][state.point.j].letter = pressedKey;\n            return {boxes:clonedBoxes, point: this.getNextPoint(state.point)};\n        });\n    }\n\n    constructor(props: State) {\n        super(props);\n        let boxes = [];\n        for (var i = 0; i < N; i++) {\n            let row = []\n            for (var j = 0; j < N; j++) {\n                row.push({id: i + \"-\" + j, fillable: shouldBeBlack(i,j), letter: \"\", x: i, y: j, clueNumber:\"\" + (1+i+N*j) });\n            }\n            boxes.push(row);\n        }\n        this.state = { \n            boxes: boxes, \n            point:{i: -1, j: -1}, \n            isSolver: true, \n            isHorizontal: true};\n    }\n\n    getHiddenBoxStyle() : CSSProperties {\n        let size = window.innerWidth > window.innerHeight ? window.innerHeight : window.innerWidth;\n        return {\n            left: size * (this.state.point.i / N),\n            top: size * (this.state.point.j / N),\n            width: size / N,\n            height: size/ N,\n            position: \"absolute\",\n            background: \"transparent\",\n            border: \"none\",\n            textAlign: \"center\",\n         }\n    }\n\n      render() {\n        console.log(\"Render Cross\" + this.state.boxes[0][0].letter);\n        return (\n        <div className=\"Crossword\" style={containerStyle()} tabIndex={0}>\n            <svg \n                onClick={e => this.onClick(e)}\n                id=\"crossword-svg\" viewBox={\"0 0 \" + N*boxSize + \" \" + N*boxSize} xmlns=\"http://www.w3.org/2000/svg\">\n                {this.state.boxes.map((row) => (\n                    row.map((b) => {\n                    return <Square \n                        key={b.id}\n                        fillable={b.fillable}\n                        y={b.y}\n                        x={b.x} \n                        id={b.id}\n                        letter={b.letter}\n                        clueNumber={b.clueNumber} />\n                    })\n                ))}\n            </svg>\n            <input value=\"\" ref={(input) => { this.nameInput = input; }} \n            maxLength={1} onKeyUp={(e) => this.onKeyUp(e)} style={this.getHiddenBoxStyle()}/>\n        </div>);\n    }\n}\n\nexport default Crossword;","import React, { CSSProperties, Component } from 'react';\nimport './App.css';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"container\">\n      <Crossword />\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}