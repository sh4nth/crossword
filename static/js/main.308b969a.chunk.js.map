{"version":3,"sources":["Square.tsx","Crossword.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["clueStyle","display","alignItems","justifyContent","fill","fontSize","textStyle","Square","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","x","y","id","letter","clueNumber","fillable","inherits","createClass","key","value","setState","_this2","svgElements","push","react_default","a","createElement","onClick","e","width","height","style","stroke","strokeWidth","Component","shouldBeBlack","i","j","N","Crossword","boxes","row","className","viewBox","xmlns","map","b","Square_Square","App","apply","arguments","Crossword_Crossword","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.308b969a.chunk.js","sourcesContent":["import React, { Component, CSSProperties, SVGAttributes, KeyboardEvent } from 'react';\n\n\nexport type BoxState = {\n    x: number\n    y: number\n    id: string\n    letter: string\n    clueNumber: string\n    fillable: boolean\n}\n\nexport const boxSize = 40;\n\nexport function getStyle(fillable: boolean): CSSProperties {\n    return {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fill: fillable ? \"white\" : \"black\",\n        stroke: 'rgb(55,55,55)',\n        strokeWidth: 1,\n    };\n}\n\nconst clueStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '10px',\n};\n\nconst textStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '20px'\n};\nconst groupStyle = {\n    pointerEvents: 'bounding-box'\n};\nexport class Square extends Component<BoxState, BoxState> {\n    constructor(props: BoxState) {\n        super(props);\n        this.state = {\n            x: props.x,\n            y: props.y,\n            id: props.id,\n            letter: props.letter,\n            clueNumber: props.clueNumber,\n            fillable: props.fillable,\n        };\n    }\n\n    public onClick() {\n        this.setState((state) => {\n            return { fillable: !state.fillable };\n        });\n    }\n\n    public render() {\n        let svgElements = [];\n        svgElements.push(\n            <rect\n            key={\"box\" + this.state.id}\n                onClick={(e) => this.onClick()}\n                x={this.state.x * boxSize}\n                y={this.state.y * boxSize}\n                width={boxSize}\n                height={boxSize}\n                style={getStyle(this.state.fillable)}>\n            </rect>);\n        if (this.state.fillable) {\n            svgElements.push(\n                <text\n                    key={\"letter\" + this.state.id}\n                    onClick={(e) => this.onClick()}\n                    x={(this.state.x + 0.35) * boxSize}\n                    y={(this.state.y + 0.65) * boxSize}\n                    style={textStyle}>{this.state.letter}\n                </text>);\n            if (this.state.clueNumber != \"\") {\n                svgElements.push(\n                    <text\n                        key={\"clue\" + this.state.id}\n                        onClick={(e) => this.onClick()}\n                        x={this.state.x * boxSize + 2}\n                        y={this.state.y * boxSize + 10}\n                        style={clueStyle}>{this.state.clueNumber}\n                    </text>);\n            }\n        }\n        return (<g key={this.state.id}>{svgElements}</g>);\n    }\n}\n","import React, { Component } from 'react';\nimport { Square, boxSize, BoxState } from \"./Square\";\n\ntype State = {\n    boxes: Array<Array<BoxState>>;\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    let randomFactor = (i*j*i*j*i + j*j*j + i*i*i*i -3*j + j*j)%100 > 99;\n    return !(randomFactor || (i%2 == 1 && j%2 == 1))\n}\n\nconst N = 5;\n\nexport class Crossword extends Component<{}, State> {\n\n\n    // public onKeyPress(key: KeyboardEvent) {\n    //     console.log(\"keyEvent\");\n    //     this.setState(state => {\n    //         const list = ;\n    //         state.boxes[0][0].letter = \"A\";\n    //         return state.boxes;\n    //     });\n    // }\n\n    constructor(props: State) {\n        super(props);\n        let boxes = [];\n        for (var i = 0; i < N; i++) {\n            let row = []\n            for (var j = 0; j < N; j++) {\n                row.push({id: i + \"-\" + j, fillable: shouldBeBlack(i,j), letter: \"\", x: i, y: j, clueNumber:\"\" + (1+i+N*j) });\n            }\n            boxes.push(row);\n        }\n        this.state = { boxes: boxes };\n    }\n\n    render() {\n        return (<div className=\"Crossword\">\n            <svg id=\"crossword-svg\" viewBox={\"0 0 \" + N*boxSize + \" \" + N*boxSize} xmlns=\"http://www.w3.org/2000/svg\">\n                {this.state.boxes.map((row) => (\n                    row.map((b) =>\n                    <Square key={b.id} fillable={b.fillable} y={b.y} x={b.x} id={b.id} letter={b.letter} clueNumber={b.clueNumber} />\n                    )\n                ))}\n            </svg>\n        </div>);\n    }\n}\n\nexport default Crossword;","import React, { CSSProperties, Component } from 'react';\nimport './App.css';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"Crossword\">\n      <Crossword />\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}