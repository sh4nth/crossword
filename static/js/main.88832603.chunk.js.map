{"version":3,"sources":["Square.tsx","Crossword.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["clueStyle","display","alignItems","justifyContent","fill","fontSize","Square","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react_default","a","createElement","id","x","y","width","height","style","fillable","stroke","strokeWidth","Component","shouldBeBlack","i","j","Crossword","renderBoxes","renderedBoxes","boxes","forEach","box","push","render","letter","className","viewBox","xmlns","App","apply","arguments","Crossword_Crossword","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88832603.chunk.js","sourcesContent":["import React, { Component, CSSProperties, SVGAttributes } from 'react';\n\n\nexport type State = {\n    x: number\n    y: number\n    id: string\n    letter: string\n    fillable: boolean\n}\n\nexport const boxSize = 40;\n\nexport function getStyle(fillable: boolean): CSSProperties {\n    return {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fill: fillable? \"white\": \"black\",\n        stroke: 'rgb(55,55,55)',\n        strokeWidth: 1,\n    };\n}\n\nconst clueStyle  = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '10px',\n};\n\nconst textStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n};\n\nexport class Square extends Component<{}, State> {\n    constructor(props: State) {\n        super(props);\n        this.state = props;\n    }\n\n    \n    render() {\n        return (<g key={this.state.id} id={this.state.id}>\n            <rect x={this.state.x * boxSize} y={this.state.y * boxSize} width={boxSize} height={boxSize} style={getStyle(this.state.fillable)}></rect>\n            <text x={this.state.x * boxSize + 2} y={this.state.y * boxSize + 10} style={clueStyle} key={\"clue\"+this.state.x +\",\"+ this.state.y}>{(this.state.x + this.state.y) % 30}</text>\n        </g>);\n    }\n}\n","import React, { Component } from 'react';\nimport { Square } from \"./Square\";\n\ntype State = {\n    boxes: Array<Square>;\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    let randomFactor = (i*j*i*j*i + j*j*j + i*i*i*i -3*j + j*j)%100 > 80;\n    return !(randomFactor || (i%2 == 1 && j%2 == 1))\n}\n\nexport class Crossword extends Component<{}, State> {\n    constructor(props: State) {\n        super(props);\n        let boxes = [];\n        for (var i = 0; i < 15; i++) {\n            for (var j = 0; j < 15; j++) {\n                boxes.push(new Square({ id: \"B\" + i + \"-\" + j, fillable: shouldBeBlack(i,j), letter: \"A\", x: i, y: j }));\n            }\n        }\n        this.state = { boxes: boxes };\n    }\n\n    renderBoxes = () => {\n        let renderedBoxes: Array<JSX.Element> = [];\n        this.state.boxes.forEach(box => {\n            renderedBoxes.push(box.render());\n        });\n        return renderedBoxes;\n    };\n\n    render() {\n        return (<div className=\"Crossword\">\n            <svg id=\"crossword-svg\" viewBox=\"0 0 600 600\" xmlns=\"http://www.w3.org/2000/svg\">\n                {this.renderBoxes()}\n            </svg>\n        </div>);\n    }\n}\n\nexport default Crossword;","import React, { CSSProperties, Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Color } from 'csstype';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"Crossword\">\n      <Crossword />\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}