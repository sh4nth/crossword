{"version":3,"sources":["Square.tsx","Crossword.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["clueStyle","display","alignItems","justifyContent","fill","fontSize","textStyle","Square","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","letter","inherits","createClass","key","value","id","fillable","svgElements","push","react_default","a","createElement","x","y","width","height","style","stroke","strokeWidth","clueNumber","Component","shouldBeBlack","i","j","N","Crossword","boxes","row","state","isSolver","event","floor","clientX","currentTarget","clientWidth","clientY","clientHeight","setState","clonedBoxes","cloneDeep","pressedKey","length","Error","toUpperCase","_this2","className","onKeyPress","e","tabIndex","onClick","viewBox","xmlns","map","b","Square_Square","App","apply","arguments","Crossword_Crossword","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02791c92.chunk.js","sourcesContent":["import React, { Component, CSSProperties, SVGAttributes, KeyboardEvent } from 'react';\n\n\nexport type BoxProps = {\n    x: number\n    y: number\n    id: string\n    letter: string\n    clueNumber: string\n    fillable: boolean\n}\n\ntype State = {\n    fillable: boolean\n}\n\nexport const boxSize = 40;\n\nexport function getStyle(fillable: boolean): CSSProperties {\n    return {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fill: fillable ? \"white\" : \"black\",\n        stroke: 'rgb(55,55,55)',\n        strokeWidth: 1,\n    };\n}\n\nconst clueStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '10px',\n};\n\nconst textStyle = {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fill: 'black',\n    fontSize: '20px'\n};\nconst groupStyle = {\n    pointerEvents: 'bounding-box'\n};\nexport class Square extends Component<BoxProps, {}> {\n    constructor(props: BoxProps) {\n        super(props);\n        console.log(\"Construct <\" + this.props.letter + \">\");\n    }\n\n    // public onClick() {\n    //     this.setState((state) => {\n    //         return { fillable: !state.fillable };\n    //     });\n    // }\n\n    public render() {\n        console.log(\"Render \" + this.props.id + \" with \" + this.props.letter);\n        let svgElements = [];\n        svgElements.push(\n            <rect\n            key={\"box\" + this.props.id}\n                x={this.props.x * boxSize}\n                y={this.props.y * boxSize}\n                width={boxSize}\n                height={boxSize}\n                style={getStyle(this.props.fillable)}>\n            </rect>);\n        if (this.props.fillable) {\n            svgElements.push(\n                <text\n                    key={\"letter\" + this.props.id}\n                    x={(this.props.x + 0.35) * boxSize}\n                    y={(this.props.y + 0.65) * boxSize}\n                    style={textStyle}>{this.props.letter}\n                </text>);\n            if (this.props.clueNumber != \"\") {\n                svgElements.push(\n                    <text\n                        key={\"clue\" + this.props.id}\n                        x={this.props.x * boxSize + 2}\n                        y={this.props.y * boxSize + 10}\n                        style={clueStyle}>{this.props.clueNumber}\n                    </text>);\n            }\n        }\n        return (<g key={this.props.id}>{svgElements}</g>);\n    }\n}\n","import React, { Component, KeyboardEvent, MouseEvent, createRef } from 'react';\nimport { Square, boxSize, BoxProps } from \"./Square\";\nimport {cloneDeep, floor} from 'lodash';\n\ntype State = {\n    boxes: Array<Array<BoxProps>>,\n    i: number,\n    j: number,\n    isSolver: boolean,\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    return !(i%2 == 1 && j%2 == 1)\n}\n\nconst N = 5;\n\nexport class Crossword extends Component<{}, State> {\n    public onClick(event: MouseEvent) {\n        let i = floor(N * event.clientX / event.currentTarget.clientWidth);\n        let j = floor(N * event.clientY / event.currentTarget.clientHeight);\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            clonedBoxes[i][j].fillable = !clonedBoxes[i][j].fillable;\n            return {boxes:clonedBoxes, i: i, j: j};\n        });\n        console.log(i + \",\" + j);\n        console.log(event.clientX + \", \" + event.clientY);\n    }\n\n    public onKeyPress(key: KeyboardEvent) {\n        let i = this.state.i;\n        let j = this.state.j;\n        if (i < 0 || j < 0 || !this.state.boxes[i][j].fillable) {\n            console.log(\"Ignoring keyEvent \" + key.key);\n            return;\n        }\n        let pressedKey = key.key\n        if (pressedKey.length > 1) {\n            throw new Error(\"Strange key: \" + pressedKey)\n        } \n        pressedKey = pressedKey.toUpperCase();\n        if (pressedKey > 'Z' || pressedKey < 'A') {\n            console.log(\"Ignoring key \" + pressedKey);\n            return;\n        }\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            clonedBoxes[state.i][state.j].letter = pressedKey;\n            return {boxes:clonedBoxes};\n        });\n    }\n\n    constructor(props: State) {\n        super(props);\n        let boxes = [];\n        for (var i = 0; i < N; i++) {\n            let row = []\n            for (var j = 0; j < N; j++) {\n                row.push({id: i + \"-\" + j, fillable: shouldBeBlack(i,j), letter: \"\", x: i, y: j, clueNumber:\"\" + (1+i+N*j) });\n            }\n            boxes.push(row);\n        }\n        this.state = { boxes: boxes, i: -1, j: -1, isSolver: true};\n    }\n\n    render() {\n        console.log(\"Render Cross\" + this.state.boxes[0][0].letter);\n        return (\n        <div className=\"Crossword\" \n            onKeyPress={(e) => this.onKeyPress(e)} \n            tabIndex={0}>\n            <svg \n                onClick={e => this.onClick(e)}\n                id=\"crossword-svg\" viewBox={\"0 0 \" + N*boxSize + \" \" + N*boxSize} xmlns=\"http://www.w3.org/2000/svg\">\n                {this.state.boxes.map((row) => (\n                    row.map((b) => {\n                    console.log(\"In CRender: \" + b.id + \" - \" + b.letter);\n                    return <Square \n                        key={b.id}\n                        fillable={b.fillable}\n                        y={b.y}\n                        x={b.x} \n                        id={b.id}\n                        letter={b.letter}\n                        clueNumber={b.clueNumber} />\n                    })\n                ))}\n            </svg>\n        </div>);\n    }\n}\n\nexport default Crossword;","import React, { CSSProperties, Component } from 'react';\nimport './App.css';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"container\">\n      <Crossword />\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}