{"version":3,"sources":["Square.tsx","Clue.tsx","Backtrack.tsx","Crossword.tsx","words-5.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SquareType","Square","_Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","prefix","coords","x","y","svgElements","push","react_default","a","createElement","pointToIdString","width","height","className","fillType","letter","clueNumber","Component","Clue","start","length","isAcross","state","constraints","Array","join","isBacktracking","isFilled","intersectingClues","boxes","constraint","i","points","point","other","across","down","contains","char","Error","oldConstraint","substr","numberClues","N","clues","currentClue","goThrough","j","BLACK","lengthen","singleLengthClues","filter","clue","forEach","row","b","c","actualClues","sort","c1","c2","updateConstraintsAndCheckIsValid","clearConstraints","clue2","a_intersect","charAt","d_intersect","setConstraint","totalTries","MAX_TRIES","solve","additionalWords","_loop","wordsByLength","w","concat","dictsByLength","usedWords","Set","map","add","console","log","fill","words","depth","n","unsolved","guess","find","word","rec","delete","index","Mode","constr","has","search","shouldBeBlack","WHITE","cloneBoxes","removeHighlight","clear","clonedBoxes","cloneDeep","box","ACTIVE","cloneAndremoveHighlight","Crossword","_this","nameInput","div","specialWords","editable","cursor","mode","SOLVE","event","_this2","rect","currentTarget","getBoundingClientRect","floor","clientX","left","clientY","top","setState","GRID","trySetIsAcrossAndHighlight","focus","possibleClues","getPoints","p","e","newMode","checked","_this3","pressedKey","toUpperCase","setConstraintsFromBoxes","getNextPoint","visibility","size","clientWidth","offsetLeft","offsetTop","position","background","border","textAlign","_this4","ref","tabIndex","onClick","id","viewBox","xmlns","Square_Square","style","hideIfNotEditable","Switch_default","onChange","onToggleChange","index_es","onFillButtonClick","t","input","maxLength","onInputBoxChange","getHiddenBoxStyle","ignored","split","s","nonNullClues","App","apply","arguments","Crossword_Crossword","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e878a708.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Point } from './Crossword';\n\nexport type BoxProps = {\n    coords: Point\n    letter: string\n    clueNumber: string\n    fillType: SquareType\n}\n\nexport enum SquareType {\n    BLACK = \"blackSquare\",\n    WHITE = \"whiteSquare\",\n    ACTIVE = \"highlightSquare\",\n}\n\nexport const boxSize = 40;\n\nexport class Square extends Component<BoxProps, {}> {\n    pointToIdString(prefix:string) {\n        return prefix + this.props.coords.x + \"-\" + this.props.coords.y;\n    }\n    \n    constructor(props: BoxProps) {\n        super(props);\n    }\n\n    public render() {\n        let svgElements = [];\n        svgElements.push(\n            <rect\n                key={this.pointToIdString(\"box\")}\n                x={this.props.coords.x * boxSize}\n                y={this.props.coords.y * boxSize}\n                width={boxSize}\n                height={boxSize}\n                className={this.props.fillType}>\n            </rect>);\n        if (this.props.fillType) {\n            if (this.props.letter != \".\") {\n                svgElements.push(\n                    <text\n                        key={this.pointToIdString(\"text\")}\n                        x={(this.props.coords.x + 0.35) * boxSize}\n                        y={(this.props.coords.y + 0.65) * boxSize}\n                        className=\"clueText\">{this.props.letter}\n                    </text>);\n            }\n            if (this.props.clueNumber != \"\") {\n                svgElements.push(\n                    <text\n                        key={this.pointToIdString(\"clue\")}\n                        x={this.props.coords.x * boxSize + 2}\n                        y={this.props.coords.y * boxSize + 10}\n                        className=\"clueNumber\">{this.props.clueNumber}\n                    </text>);\n            }\n        }\n        return (<g key={this.pointToIdString(\"group\")}>{svgElements}</g>);\n    }\n}\n","import {BoxProps, SquareType} from \"./Square\";\nimport {Point} from \"./Crossword\";\n\ntype ClueType = {\n    clueNumber: number,\n    start: Point,\n    length: number,\n    isAcross: boolean,\n}\n\ntype BacktrackingClueState = {\n    isBacktracking: boolean,\n    isFilled: boolean,\n    constraints: string,\n    intersectingClues: Array<Clue>,\n}\n\nexport class Clue {\n    clueNumber: number;\n    start: Point;\n    length: number;\n    isAcross: boolean;\n    state: BacktrackingClueState;\n\n    constructor(props: ClueType) {\n        this.clueNumber = props.clueNumber;\n        this.start = props.start;\n        this.length = props.length;\n        this.isAcross = props.isAcross;\n        let constraints = Array(props.length + 1).join(\".\");\n        this.state = {\n            isBacktracking: false,\n            isFilled: false,\n            constraints:constraints,\n            intersectingClues:[]};\n    }\n\n    lengthen() {\n        this.length++;\n        this.state.constraints += \".\";\n    }\n\n    public clearConstraints() {\n        this.state.constraints = Array(this.length+1).join('.');\n    }\n\n    public setConstraintsFromBoxes(boxes: Array<Array<BoxProps>>) {\n        let constraint = \"\";\n        for(let i=0; i<this.length; i++) {\n            if (this.isAcross) {\n                constraint += boxes[this.start.y][this.start.x + i].letter;\n            } else {\n                constraint += boxes[this.start.y + i][this.start.x].letter;\n            }\n        }\n        this.state.constraints = constraint;\n    }\n\n    public getPoints() {\n        let points = [];\n        for(let i=0; i<this.length; i++) {\n            if (this.isAcross) {\n                points.push({x:this.start.x + i, y:this.start.y});\n            } else {\n                points.push({x:this.start.x, y:this.start.y + i});\n            }\n        }\n        return points;\n    }\n\n    public contains(point: Point) {\n        if (this.isAcross) {\n            return (point.y == this.start.y) && (this.start.x <= point.x) && (point.x < this.start.x + this.length);\n        } else {\n            return (point.x == this.start.x) && (this.start.y <= point.y) && (point.y < this.start.y + this.length);\n        }\n    }\n\n    public intersects(other: Clue) {\n        if (other.isAcross == this.isAcross) {\n            return null;\n        }\n        let across = other.isAcross ? other : this;\n        let down = other.isAcross ? this : other;\n\n        let point = {x: down.start.x, y: across.start.y}\n        if (across.contains(point) && down.contains(point)) {\n            return point;\n        }\n        return null;\n    }\n\n    public setConstraint(i:number, char:string) {\n        if(char.length != 1 || i >= this.state.constraints.length) {\n            throw new Error(\n                \"chr length must be 1 and \" + i + \" < \" + this.state.constraints.length\n                + \" -- \" + this.start.x + \",\" + this.start.y + \"(\" + this.length + \")\" \n                + (this.isAcross? \"A\" : \"D\")); \n        }\n\n        let oldConstraint = this.state.constraints;\n        let oldN = oldConstraint.length;\n        this.state.constraints = oldConstraint.substr(0,i) + char + oldConstraint.substr(i+1);\n    }\n}\n\n\nexport function numberClues(boxes: Array<Array<BoxProps>>): Array<Clue> {\n    let N = boxes.length;\n    let clues : Array<Clue> = [];\n\n    let currentClue : Clue | null = null;\n\n    function goThrough(i: number, j: number, isAcross: boolean) {\n        if (i == N || j == N) {\n            if(currentClue != null) {\n                clues.push(currentClue)\n            }\n            currentClue = null;\n            return;\n        }\n        if(boxes[i][j].fillType != SquareType.BLACK) {\n            if (currentClue == null) {\n                currentClue = new Clue({start:{x:j, y:i}, isAcross: isAcross, length: 1, clueNumber: 0});\n            } else {\n                currentClue.lengthen();\n            }\n        } else {\n            if(currentClue != null) {\n                clues.push(currentClue)\n            }\n            currentClue = null;\n        }\n    }\n\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N; j++) {\n            boxes[i][j].clueNumber = \"\";\n        }\n    }\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N+1; j++) {\n            goThrough(i, j, true);\n        }\n    }\n\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N+1; j++) {\n            goThrough(j, i, false);\n        }\n    }\n    let singleLengthClues = clues\n        .filter(clue => clue.length == 1);\n    \n    boxes.forEach(row => row.forEach(b => {\n        // Boxes which are isolated in both directions should be blacked\n        if (singleLengthClues.filter(c=> c.start.x == b.coords.x && c.start.y == b.coords.y).length == 2) {\n            b.fillType = SquareType.BLACK;\n        }}));\n\n    let actualClues = clues.filter(clue => clue.length > 1)\n        .sort((c1,c2) => c1.start.x + N*c1.start.y - c2.start.x - c2.start.y*N);\n    \n    // Number the clues\n    let clueNumber = 0;\n    for (let i=0; i<actualClues.length; i++) {\n        let clue = actualClues[i];\n        if (boxes[clue.start.y][clue.start.x].clueNumber == \"\") {\n            clueNumber++;\n            boxes[clue.start.y][clue.start.x].clueNumber = \"\" + clueNumber;\n        }\n        clue.clueNumber = clueNumber;\n    }\n    return actualClues;\n}","import { Clue } from \"./Clue\";\nimport { words5 } from \"./words-5\";\n\nfunction updateConstraintsAndCheckIsValid(clues: Array<Clue>) {\n    for(let i=0; i<clues.length; i++) {\n        let clue = clues[i];\n        if (!clue.state.isFilled) {\n            clue.clearConstraints();\n        }\n        for(let j=0; j<clue.state.intersectingClues.length; j++) {\n            let clue2 = clue.state.intersectingClues[j];\n            if(!clue.state.isFilled && !clue2.state.isFilled) {\n                continue;\n            }\n            let across = clue.isAcross ? clue : clue2;\n            let down = clue.isAcross ? clue2 : clue;\n\n            let a_intersect = \n                across.state.constraints.charAt(down.start.x - across.start.x);\n            let d_intersect = \n                down.state.constraints.charAt(across.start.y - down.start.y);\n            if (!across.state.isFilled) {\n                across.setConstraint(down.start.x - across.start.x, d_intersect);\n            }\n            if (!down.state.isFilled) {\n                down.setConstraint(across.start.y - down.start.y,  a_intersect);\n            }\n            if (across.state.isFilled && down.state.isFilled && a_intersect != d_intersect) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\nfunction initForBackTracking(clues: Array<Clue>) {\n    console.log(\"InBacktr\");\n    for(let i=0; i<clues.length; i++) {\n        clues[i].clearConstraints();\n        clues[i].state.isBacktracking = true;\n        clues[i].state.isFilled = false;\n        clues[i].state.intersectingClues = [];\n    }\n\n    for(let i=0; i<clues.length; i++) {\n        for(let j=i+1; j<clues.length; j++) {\n            let c1 = clues[i];\n            let c2 = clues[j];\n            if (!c1.state || !c2.state) {\n                throw Error(\"Just set above\");\n            }\n            if (c1.intersects(c2)) {\n                c1.state.intersectingClues.push(c2);\n                c2.state.intersectingClues.push(c1);\n            }\n        }\n    }\n}\n\nlet totalTries = 0;\nlet MAX_TRIES = 300;\n\nexport function solve(clues : Array<Clue>, additionalWords: Array<string>) {\n    totalTries = 0;\n    // initForBackTracking(clues);\n    updateConstraintsAndCheckIsValid(clues);\n    for (let i=2; i<=15; i++) {\n        wordsByLength[i] = additionalWords.filter(w => w.length == i).concat(dictsByLength[i]);\n    }\n    let usedWords = new Set();\n    clues.filter(c => c.state.isFilled).map(c => c.state.constraints).forEach(w => usedWords.add(w));\n    console.log(usedWords);\n    return fill(clues, usedWords, 0);\n}\n\nfunction fill(clues : Array<Clue>, words:Set<string>, depth:number): Array<Clue> | null {\n    totalTries += 1;\n\n    if(totalTries > MAX_TRIES) {\n        updateConstraintsAndCheckIsValid(clues);\n        return clues;\n    }\n\n    if (depth > 40) {\n        throw new Error(\"Recursion depth\");\n    }\n    let n = clues.filter(c => c.state.isFilled).length;\n    console.log(\"Solved \" + n + \" of \" + clues.length);\n    let unsolved = clues.filter(c => !c.state.isFilled);\n\n\n    if (unsolved.length == 0) {\n        return clues;\n    }\n    \n    for (let i =0; i<unsolved.length; i++) {\n        let clue = unsolved[i];\n        let guess = find(clue, words, 0);\n        if (guess == null) {\n            return null;\n        }\n    }\n\n\n    for (let i=0; i<unsolved.length; i++) {\n        let clue = unsolved[i];\n        let guess = find(clue, words, 0);\n        while (guess != null) {\n            // TODO Make guess return index and guess to continue searches correctly\n            words.add(guess.word);\n            clue.state.constraints = guess.word;\n            clue.state.isFilled = true;\n            updateConstraintsAndCheckIsValid(clues);\n            let rec = fill(clues, words, depth + 1);\n            if (rec != null) {\n                return rec;\n            }\n            clue.state.isFilled = false;\n            words.delete(guess.word);\n            updateConstraintsAndCheckIsValid(clues);\n            guess = find(clue, words, guess.index+1);\n        }\n    }\n    return null;\n}\n\ntype Guess = {\n    index: number,\n    word: string,\n} | null;\n\nlet wordsByLength : Array<Array<string>> = Array(16);\nlet dictsByLength : Array<Array<string>> = Array(16);\nfor (let i=0; i<=15; i++) {\n    dictsByLength[i] = [];\n}\n\ndictsByLength[2] = [\n    \"BX\",\n    \"XD\",\n    \"BB\",\n    \"AC\",\n    \"CC\",\n    \"AB\",\n];\ndictsByLength[5] = words5;\n\nfunction find(clue:Clue, usedWords:Set<string>, start:number) : Guess {\n    let words = wordsByLength[clue.length];\n    for(let i=start; i <words.length; i++) {\n        if (usedWords.has(words[i])) {\n            continue;\n        }\n        if (matches(clue.state.constraints, words[i])) {\n            return {index: i, word:words[i]};\n        }\n    }\n    return null;\n}\n\nfunction matches(constr: string, word:string) {\n    return word.search(constr) != -1;\n}","import React, { Component, MouseEvent, CSSProperties } from 'react';\nimport { Square, boxSize, BoxProps, SquareType } from \"./Square\";\nimport {cloneDeep, floor} from 'lodash';\nimport Switch from '@material-ui/core/Switch';\nimport {numberClues, Clue} from './Clue';\nimport { Button, TextField } from '@material-ui/core';\nimport { solve } from './Backtrack';\n\nexport type Point = {\n    x: number,\n    y: number,\n}\n\nenum Mode {\n    SOLVE = \"SOLVE\",\n    GRID = \"GRID\",\n}\n\ntype State = {\n    boxes: Array<Array<BoxProps>>,\n    clues: Array<Clue>,\n    cursor: Point,\n    mode: Mode,\n    isAcross: boolean,\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    if (i%2 == 1 && j%2 == 1) {\n        return SquareType.BLACK;\n    } else {\n        return SquareType.WHITE;\n    }\n}\n\nconst N = 5;\n\ntype CrosswordProps = {\n    editable: boolean,\n}\n\nfunction cloneBoxes(boxes: Array<Array<BoxProps>>, removeHighlight: boolean, clear:boolean) {\n    let clonedBoxes = cloneDeep(boxes);\n    clonedBoxes.forEach(row => row.forEach(box => {\n        if(removeHighlight && box.fillType == SquareType.ACTIVE) {\n            box.fillType = SquareType.WHITE;\n        }\n        if(clear) {\n            box.letter = \".\";\n        }\n    }));\n    return clonedBoxes;\n}\n\nfunction cloneAndremoveHighlight(boxes: Array<Array<BoxProps>>) {\n    return cloneBoxes(boxes, true, false);\n}\n\nexport class Crossword extends Component<CrosswordProps, State> {\n    nameInput: HTMLInputElement | null | undefined;\n    div: HTMLDivElement | null | undefined;\n    specialWords: HTMLTextAreaElement | null |  undefined;\n\n    public onClick(event: MouseEvent) {\n        let rect = event.currentTarget.getBoundingClientRect();\n        let x = floor(N * (event.clientX - rect.left) / rect.width);\n        let y = floor(N * (event.clientY - rect.top) / rect.height);\n        console.log(x + \", \" + y);\n        let point = {x: x, y: y};\n        this.setState(state => {\n            let clues = state.clues;\n            let clonedBoxes = cloneAndremoveHighlight(state.boxes);\n            let isAcross = state.isAcross;\n            if (state.mode == Mode.GRID) {\n                if (clonedBoxes[y][x].fillType == SquareType.BLACK) {\n                    clonedBoxes[y][x].fillType = SquareType.WHITE;\n                } else {\n                    clonedBoxes[y][x].fillType = SquareType.BLACK;\n                }\n                clues = numberClues(clonedBoxes);\n            } else {\n                isAcross = this.trySetIsAcrossAndHighlight(clonedBoxes, clues, state.isAcross, point);\n            }\n            return {boxes:clonedBoxes, cursor:point, clues: clues, isAcross: isAcross};\n        });\n        if (this.nameInput) {\n            this.nameInput.focus();\n        }\n    }\n\n    // Caller must set state using the new clonedBoxes\n    trySetIsAcrossAndHighlight(clonedBoxes:Array<Array<BoxProps>>, clues: Array<Clue>, isAcross: boolean, point: Point) {\n        let possibleClues = clues.filter(c => c.contains(point));\n                if (possibleClues.length > 2) {\n                    throw new Error(\"Should not be possible\");\n                } else if (possibleClues.length == 2) {\n                    let clue = possibleClues.filter(c => c.isAcross == isAcross)[0];\n                    clue.getPoints().forEach(\n                            p => {clonedBoxes[p.y][p.x].fillType = SquareType.ACTIVE;});\n                } else if (possibleClues.length == 1) {\n                    let clue = possibleClues[0];\n                    isAcross = clue.isAcross;\n                    clue.getPoints().forEach(\n                            p => {clonedBoxes[p.y][p.x].fillType = SquareType.ACTIVE;});\n                } else {\n                    console.log(\"No clues at this point\");\n                }\n                return isAcross;\n    }\n\n    getNextPoint(p: Point) {\n        if (p.x<0 || p.y < 0) {\n            return p;\n        }\n        if (this.state.isAcross) {\n            if (p.x < N-1) {\n                return {x: p.x+1, y: p.y};\n            } else {\n                return p;\n            }\n        } else {\n            if (p.y < N-1) {\n                return {x: p.x, y: p.y+1};\n            } else {\n                return p;\n            }\n        }\n    }\n\n    onToggleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        let newMode = !e.currentTarget.checked ? Mode.SOLVE : Mode.GRID;\n        this.setState(state => {\n            return {mode: newMode, boxes: cloneAndremoveHighlight(state.boxes)}; });\n    }\n\n    onInputBoxChange() {\n        let x = this.state.cursor.x;\n        let y = this.state.cursor.y;\n        if (x < 0 || y < 0 || this.state.boxes[y][x].fillType == SquareType.BLACK || !this.nameInput) {\n            console.log(\"Ignoring changeEvent\");\n            return;\n        }\n\n        let pressedKey = this.nameInput.value;\n        pressedKey = pressedKey.toUpperCase();\n        if (pressedKey == \" \" || pressedKey == \".\" || pressedKey == \"\") {\n            // Clear the box\n            pressedKey = \".\";\n        } else if (pressedKey > 'Z' || pressedKey < 'A') {\n            console.log(\"Ignoring key \" + pressedKey);\n            return;\n        }\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            clonedBoxes[state.cursor.y][state.cursor.x].letter = pressedKey;\n            let clues = cloneDeep(this.state.clues);\n            clues.forEach(c => c.setConstraintsFromBoxes(clonedBoxes));\n            return {boxes:clonedBoxes, cursor: this.getNextPoint(state.cursor), clues:clues};\n        });\n    }\n\n    constructor(props: CrosswordProps) {\n        super(props);\n        if (!props.editable) {\n            console.log(\"To implmenet loading crossword later\");\n        }\n\n        let boxes = [];\n        for (var i = 0; i < N; i++) {\n            let row = []\n            for (var j = 0; j < N; j++) {\n                row.push({\n                    fillType: shouldBeBlack(i,j),\n                    letter: \".\",\n                    coords: {y: i, x: j},\n                    clueNumber:\"\"});\n            }\n            boxes.push(row);\n        }\n        this.state = { \n            boxes: boxes,\n            clues: numberClues(boxes),\n            cursor:{x: -1, y: -1}, \n            mode: Mode.SOLVE, \n            isAcross: true};\n    }\n\n    getHiddenBoxStyle() : CSSProperties {\n        if(!this.div || this.state.mode == Mode.GRID) {\n            return {\n                visibility: \"collapse\",\n            };\n        }\n        let size = this.div.clientWidth;\n        return {\n            left: this.div.offsetLeft + size * (this.state.cursor.x / N),\n            top: this.div.offsetTop + size * (this.state.cursor.y / N),\n            width: size / N,\n            height: size/ N,\n            position: \"absolute\",\n            background: \"transparent\",\n            border: \"none\",\n            textAlign: \"center\",\n         }\n    }\n\n    hideIfNotEditable() : CSSProperties {\n        if(!this.props.editable) {\n            return {\n                visibility: \"collapse\",\n            };\n        }\n        return {\n            visibility: \"visible\",\n        };\n    }\n\n    render() {\n        console.log(\"Render Crossword\");\n        return (\n        <div ref={div => {this.div = div;}} className=\"crossword\" tabIndex={0}>\n            <svg \n                onClick={e => this.onClick(e)}\n                id=\"crossword-svg\" viewBox={\"0 0 \" + N*boxSize + \" \" + N*boxSize} xmlns=\"http://www.w3.org/2000/svg\">\n                {this.state.boxes.map((row) => (\n                    row.map((b) => {\n                    return <Square \n                        key={b.coords.x + \"-\" + b.coords.y}\n                        fillType={b.fillType}\n                        coords={b.coords}\n                        letter={b.letter}\n                        clueNumber={b.clueNumber} />\n                    })\n                ))}\n            </svg>\n            <div style={this.hideIfNotEditable()}>\n                Edit Grid<Switch value=\"Edit\" onChange={e => this.onToggleChange(e)}/>\n                <Button onClick={e => this.onFillButtonClick(e)}>Fill</Button>\n                <Button onClick={e => this.setState(state => {\n                    let clonedBoxes = cloneBoxes(state.boxes, true, true);\n                    return {boxes: clonedBoxes, clues: numberClues(clonedBoxes)}\n                })}>Clear</Button>\n                <br/>\n                <textarea className=\"extraWords\" ref={t => {this.specialWords = t;}} />\n            </div>\n            <input value=\"\" ref={input => {this.nameInput = input;}} \n            maxLength={1} \n            onClick={e => {this.setState(state => {\n                let clonedBoxes = cloneAndremoveHighlight(state.boxes);\n                let isAcross = this.trySetIsAcrossAndHighlight(\n                    clonedBoxes, state.clues, !state.isAcross, state.cursor);\n                return {isAcross: isAcross, boxes:clonedBoxes}})\n            }}\n            onChange={e => this.onInputBoxChange()} \n            style={this.getHiddenBoxStyle()}/>\n            <div>\n                Across\n                <ul className=\"clueList\">\n                    {this.state.clues.filter(c=> c.isAcross).map(c => {\n                        return <li key={c.clueNumber + \" \" + c.isAcross}>{c.clueNumber}. {c.state.constraints} ({c.length})</li>\n                    })}\n                </ul>\n            </div>\n            <div>\n                Down\n                <ul className=\"clueList\">\n                    {this.state.clues.filter(c=> !c.isAcross).map(c => {\n                        return <li key={c.clueNumber + \" \" + c.isAcross}>{c.clueNumber}. {c.state.constraints} ({c.length})</li>\n                    })}\n                </ul>\n            </div>\n        </div>);\n    }\n\n    onFillButtonClick(ignored: any) {\n        let additionalWords : Array<string> = [];\n        if (this.specialWords) {\n            new Set(this.specialWords.value.toUpperCase().split(/[^A-Z]/)).forEach(s => additionalWords.push(s));\n        }\n        let clues = solve(this.state.clues, additionalWords);\n        if(clues != null) {\n            let nonNullClues = clues\n            let clonedBoxes = cloneAndremoveHighlight(this.state.boxes);\n            for(let i=0; i<N; i++) {\n                for(let j=0; j<N; j++) {\n                    clonedBoxes[i][j].letter = \"\";\n                }\n            }\n            clues.forEach(\n                clue => {\n                    for (let i=0; i<clue.length; i++) {\n                        if(!clue.state.isFilled) {\n                            continue;\n                        }\n                        if(clue.isAcross) {\n                            clonedBoxes[clue.start.y][clue.start.x + i].letter = clue.state.constraints.charAt(i);\n                        } else {\n                            clonedBoxes[clue.start.y + i][clue.start.x].letter = clue.state.constraints.charAt(i);\n                        }\n                    }\n                }\n            )\n            this.setState(state => {\n                return {boxes: clonedBoxes, clues: nonNullClues}\n            });\n        } else {\n            console.log(\"No solution!\");\n        }\n    }\n}\n\nexport default Crossword;","export const words5 = [\n\"AAAAA\", \n\"ABBBB\", \n\"ACCCC\", \n\"ADDDD\", \n\"BXCXD\", \n\"BYCYD\",\n]","import React, { Component } from 'react';\nimport './App.css';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"container\">\n      <Crossword editable={true}/>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}