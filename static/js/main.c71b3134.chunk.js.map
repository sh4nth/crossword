{"version":3,"sources":["Square.tsx","Crossword.tsx","Utils.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SquareType","Mode","Square","_Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","prefix","coords","x","y","svgElements","push","react_default","a","createElement","pointToIdString","width","height","className","fillType","letter","clueNumber","Component","Clue","start","length","isAcross","points","i","point","numberClues","boxes","N","clues","currentClue","goThrough","j","BLACK","singleLengthClues","filter","clue","setOfSingleLengthClueStarts","Set","forEach","has","console","log","add","actualClues","sort","c1","c2","shouldBeBlack","WHITE","containerStyle","size","window","innerWidth","innerHeight","cloneAndremoveHighlight","clonedBoxes","cloneDeep","row","box","ACTIVE","Crossword","_this","nameInput","div","editable","state","cursor","mode","SOLVE","event","_this2","floor","clientX","currentTarget","clientWidth","clientY","clientHeight","setState","GRID","trySetIsAcrossAndHighlight","focus","possibleClues","c","contains","Error","getPoints","p","e","newMode","checked","_this3","pressedKey","toUpperCase","getNextPoint","visibility","left","top","position","background","border","textAlign","_this4","ref","style","tabIndex","onClick","id","viewBox","xmlns","map","b","Square_Square","hideIfNotEditable","Switch_default","onChange","onToggleChange","input","maxLength","onInputBoxChange","getHiddenBoxStyle","App","apply","arguments","Crossword_Crossword","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c71b3134.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Point } from './Crossword';\n\nexport type BoxProps = {\n    coords: Point\n    letter: string\n    clueNumber: string\n    fillType: SquareType\n}\n\nexport enum SquareType {\n    BLACK = \"blackSquare\",\n    WHITE = \"whiteSquare\",\n    ACTIVE = \"highlightSquare\",\n}\n\nexport const boxSize = 40;\n\nexport class Square extends Component<BoxProps, {}> {\n    pointToIdString(prefix:string) {\n        return prefix + this.props.coords.x + \"-\" + this.props.coords.y;\n    }\n    \n    constructor(props: BoxProps) {\n        super(props);\n    }\n\n    public render() {\n        let svgElements = [];\n        svgElements.push(\n            <rect\n                key={this.pointToIdString(\"box\")}\n                x={this.props.coords.x * boxSize}\n                y={this.props.coords.y * boxSize}\n                width={boxSize}\n                height={boxSize}\n                className={this.props.fillType}>\n            </rect>);\n        if (this.props.fillType) {\n            svgElements.push(\n                <text\n                    key={this.pointToIdString(\"text\")}\n                    x={(this.props.coords.x + 0.35) * boxSize}\n                    y={(this.props.coords.y + 0.65) * boxSize}\n                    className=\"clueText\">{this.props.letter}\n                </text>);\n            if (this.props.clueNumber != \"\") {\n                svgElements.push(\n                    <text\n                        key={this.pointToIdString(\"clue\")}\n                        x={this.props.coords.x * boxSize + 2}\n                        y={this.props.coords.y * boxSize + 10}\n                        className=\"clueNumber\">{this.props.clueNumber}\n                    </text>);\n            }\n        }\n        return (<g key={this.pointToIdString(\"group\")}>{svgElements}</g>);\n    }\n}\n","import React, { Component, MouseEvent, CSSProperties } from 'react';\nimport { Square, boxSize, BoxProps, SquareType } from \"./Square\";\nimport {cloneDeep, floor} from 'lodash';\nimport Switch from '@material-ui/core/Switch';\nimport {numberClues, Clue} from './Utils';\n\nexport type Point = {\n    x: number,\n    y: number,\n}\n\nenum Mode {\n    SOLVE = \"SOLVE\",\n    GRID = \"GRID\",\n}\n\ntype State = {\n    boxes: Array<Array<BoxProps>>,\n    clues: Array<Clue>,\n    cursor: Point,\n    mode: Mode,\n    isAcross: boolean,\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    if (i%2 == 1 && j%2 == 1) {\n        return SquareType.BLACK;\n    } else {\n        return SquareType.WHITE;\n    }\n}\n\nconst N = 5;\n\nfunction containerStyle() {\n    let size = window.innerWidth > window.innerHeight ? window.innerHeight : window.innerWidth;\n    return {\n        width: size,\n        height: size,\n    }\n}\n\ntype CrosswordProps = {\n    editable: boolean,\n}\n\nfunction cloneAndremoveHighlight(boxes: Array<Array<BoxProps>>) {\n    let clonedBoxes = cloneDeep(boxes);\n    clonedBoxes.forEach(row => row.forEach(box => {\n        if(box.fillType == SquareType.ACTIVE) {\n            box.fillType = SquareType.WHITE;\n        }\n    }));\n    return clonedBoxes;\n}\n\nexport class Crossword extends Component<CrosswordProps, State> {\n    nameInput: HTMLInputElement | null | undefined;\n    div: HTMLDivElement | null | undefined;\n\n    public onClick(event: MouseEvent) {\n        let x = floor(N * event.clientX / event.currentTarget.clientWidth);\n        let y = floor(N * event.clientY / event.currentTarget.clientHeight);\n        let point = {x: x, y: y};\n        this.setState(state => {\n            let clues = state.clues;\n            let clonedBoxes = cloneAndremoveHighlight(state.boxes);\n            let isAcross = state.isAcross;\n            if (state.mode == Mode.GRID) {\n                if (clonedBoxes[y][x].fillType == SquareType.BLACK) {\n                    clonedBoxes[y][x].fillType = SquareType.WHITE;\n                } else {\n                    clonedBoxes[y][x].fillType = SquareType.BLACK;\n                }\n                clues = numberClues(clonedBoxes);\n            } else {\n                isAcross = this.trySetIsAcrossAndHighlight(clonedBoxes, clues, state.isAcross, point);\n            }\n            return {boxes:clonedBoxes, cursor:point, clues: clues, isAcross: isAcross};\n        });\n        console.log(x + \",\" + y);\n        // console.log(event.clientX + \", \" + event.clientY);\n        if (this.nameInput) {\n            this.nameInput.focus();\n        }\n    }\n\n    trySetIsAcrossAndHighlight(clonedBoxes:Array<Array<BoxProps>>, clues: Array<Clue>, isAcross: boolean, point: Point) {\n        let possibleClues = clues.filter(c => c.contains(point));\n                console.log(possibleClues);\n                if (possibleClues.length > 2) {\n                    throw new Error(\"Should not be possible\");\n                } else if (possibleClues.length == 2) {\n                    console.log(\"Trying for 2\" + isAcross);\n                    let clue = possibleClues.filter(c => c.isAcross == isAcross)[0];\n                    console.log(clue);\n                    clue.getPoints().forEach(\n                            p => {clonedBoxes[p.y][p.x].fillType = SquareType.ACTIVE;});\n                } else if (possibleClues.length == 1) {\n                    let clue = possibleClues[0];\n                    isAcross = clue.isAcross;\n                    clue.getPoints().forEach(\n                            p => {clonedBoxes[p.y][p.x].fillType = SquareType.ACTIVE;});\n                } else {\n                    console.log(\"No clues at this point\");\n                }\n                return isAcross;\n    }\n\n    getNextPoint(p: Point) {\n        if (p.x<0 || p.y < 0) {\n            return p;\n        }\n        if (this.state.isAcross) {\n            if (p.x < N-1) {\n                return {x: p.x+1, y: p.y};\n            } else {\n                return p;\n            }\n        } else {\n            if (p.y < N-1) {\n                return {x: p.x, y: p.y+1};\n            } else {\n                return p;\n            }\n        }\n    }\n\n    onToggleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        let newMode = !e.currentTarget.checked ? Mode.SOLVE : Mode.GRID;\n        this.setState(state => {\n            return {mode: newMode, boxes: cloneAndremoveHighlight(state.boxes)}; });\n    }\n\n    onInputBoxChange() {\n        let x = this.state.cursor.x;\n        let y = this.state.cursor.y;\n        if (x < 0 || y < 0 || this.state.boxes[y][x].fillType == SquareType.BLACK || !this.nameInput) {\n            console.log(\"Ignoring changeEvent\");\n            return;\n        }\n\n        let pressedKey = this.nameInput.value;\n        pressedKey = pressedKey.toUpperCase();\n        if (pressedKey > 'Z' || pressedKey < 'A') {\n            console.log(\"Ignoring key \" + pressedKey);\n            return;\n        }\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            clonedBoxes[state.cursor.y][state.cursor.x].letter = pressedKey;\n            return {boxes:clonedBoxes, cursor: this.getNextPoint(state.cursor)};\n        });\n    }\n\n    constructor(props: CrosswordProps) {\n        super(props);\n        if (!props.editable) {\n            console.log(\"To implmenet loading crossword later\");\n        }\n\n        let boxes = [];\n        for (var i = 0; i < N; i++) {\n            let row = []\n            for (var j = 0; j < N; j++) {\n                row.push({\n                    fillType: shouldBeBlack(i,j),\n                    letter: \"\",\n                    coords: {y: i, x: j},\n                    clueNumber:\"\"});\n            }\n            boxes.push(row);\n        }\n        this.state = { \n            boxes: boxes,\n            clues: numberClues(boxes),\n            cursor:{x: -1, y: -1}, \n            mode: Mode.SOLVE, \n            isAcross: true};\n    }\n\n    getHiddenBoxStyle() : CSSProperties {\n        if(!this.div || this.state.mode == Mode.GRID) {\n            return {\n                visibility: \"collapse\",\n            };\n        }\n        let size = this.div.clientWidth;\n        return {\n            left: size * (this.state.cursor.x / N),\n            top: size * (this.state.cursor.y / N),\n            width: size / N,\n            height: size/ N,\n            position: \"absolute\",\n            background: \"transparent\",\n            border: \"none\",\n            textAlign: \"center\",\n         }\n    }\n\n    hideIfNotEditable() : CSSProperties {\n        if(!this.props.editable) {\n            return {\n                visibility: \"collapse\",\n            };\n        }\n        return {\n            visibility: \"visible\",\n        };\n    }\n\n    render() {\n        console.log(\"Render Cross\" + this.state.boxes[0][0].letter);\n        return (\n        <div ref={div => {this.div = div;}} className=\"Crossword\" style={containerStyle()} tabIndex={0}>\n            <svg \n                onClick={e => this.onClick(e)}\n                id=\"crossword-svg\" viewBox={\"0 0 \" + N*boxSize + \" \" + N*boxSize} xmlns=\"http://www.w3.org/2000/svg\">\n                {this.state.boxes.map((row) => (\n                    row.map((b) => {\n                    return <Square \n                        key={b.coords.x + \"-\" + b.coords.y}\n                        fillType={b.fillType}\n                        coords={b.coords}\n                        letter={b.letter}\n                        clueNumber={b.clueNumber} />\n                    })\n                ))}\n            </svg>\n            <div style={this.hideIfNotEditable()} >Edit Grid<Switch value=\"Edit\" onChange={e => this.onToggleChange(e)}/></div>\n            <input value=\"\" ref={input => {this.nameInput = input;}} \n            maxLength={1} \n            onClick={e => {this.setState(state => {\n                let clonedBoxes = cloneAndremoveHighlight(state.boxes);\n                let isAcross = this.trySetIsAcrossAndHighlight(\n                    clonedBoxes, state.clues, !state.isAcross, state.cursor);\n                return {isAcross: isAcross, boxes:clonedBoxes}})\n            }}\n            onChange={e => this.onInputBoxChange()} \n            style={this.getHiddenBoxStyle()}/>\n            <div className=\"blackSquare\"></div>\n        </div>);\n    }\n}\n\nexport default Crossword;","import {BoxProps, SquareType} from \"./Square\";\nimport {Point} from \"./Crossword\";\n\ntype ClueType = {\n    clueNumber: number,\n    start: Point,\n    length: number,\n    isAcross: boolean, \n}\n\nexport class Clue {\n    clueNumber: number;\n    start: Point;\n    length: number;\n    isAcross: boolean;\n\n    constructor(props: ClueType) {\n        this.clueNumber = props.clueNumber;\n        this.start = props.start;\n        this.length = props.length;\n        this.isAcross = props.isAcross;\n    }\n\n    public getPoints() {\n        let points = [];\n        for(let i=0; i<this.length; i++) {\n            if (this.isAcross) {\n                points.push({x:this.start.x + i, y:this.start.y});\n            } else {\n                points.push({x:this.start.x, y:this.start.y + i});\n            }\n        }\n        return points;\n    }\n\n    public contains(point: Point) {\n        if (this.isAcross) {\n            return (point.y == this.start.y) && (this.start.x <= point.x) && (point.x < this.start.x + this.length);\n        } else {\n            return (point.x == this.start.x) && (this.start.y <= point.y) && (point.y < this.start.y + this.length);\n        }\n    }\n}\n\n\nexport function numberClues(boxes: Array<Array<BoxProps>>): Array<Clue> {\n    let N = boxes.length;\n    let clues : Array<Clue> = [];\n\n    let currentClue : Clue | null = null;\n\n    function goThrough(i: number, j: number, isAcross: boolean) {\n        if (i == N || j == N) {\n            if(currentClue != null) {\n                clues.push(currentClue)\n            }\n            currentClue = null;\n            return;\n        }\n        if(boxes[i][j].fillType != SquareType.BLACK) {\n            if (currentClue == null) {\n                currentClue = new Clue({start:{x:j, y:i}, isAcross: isAcross, length: 1, clueNumber: 0});\n            } else {\n                currentClue.length++;\n            }\n        } else {\n            if(currentClue != null) {\n                clues.push(currentClue)\n            }\n            currentClue = null;\n        }\n    }\n\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N; j++) {\n            boxes[i][j].clueNumber = \"\";\n        }\n    }\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N+1; j++) {\n            goThrough(i, j, true);\n        }\n    }\n\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N+1; j++) {\n            goThrough(j, i, false);\n        }\n    }\n    let singleLengthClues = clues\n        .filter(clue => clue.length == 1)\n\n    let setOfSingleLengthClueStarts = new Set();\n\n    singleLengthClues.forEach(start => {\n        if (setOfSingleLengthClueStarts.has(start)) {\n            console.log(\"Duplicate\");\n            return [];\n        }\n        setOfSingleLengthClueStarts.add(start);\n    });\n\n    let actualClues = clues.filter(clue => clue.length > 1)\n        .sort((c1,c2) => c1.start.x + N*c1.start.y - c2.start.x - c2.start.y*N);\n    let clueNumber = 0;\n    console.log(\"-----------\");\n    for (let i=0; i<actualClues.length; i++) {\n        let clue = actualClues[i];\n        console.log(\"Start\");\n        console.log(clue);\n        if (boxes[clue.start.y][clue.start.x].clueNumber == \"\") {\n            clueNumber++;\n            boxes[clue.start.y][clue.start.x].clueNumber = \"\" + clueNumber;\n        }\n        clue.clueNumber = clueNumber;\n    }\n    console.log(actualClues);\n    return actualClues;\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"container\">\n      <Crossword editable={true}/>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}