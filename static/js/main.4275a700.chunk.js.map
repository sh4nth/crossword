{"version":3,"sources":["Square.tsx","Clue.tsx","Backtrack.tsx","Crossword.tsx","words-5.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SquareType","Square","_Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","prefix","coords","x","y","svgElements","push","react_default","a","createElement","pointToIdString","width","height","className","fillType","letter","clueNumber","Component","Clue","start","length","isAcross","state","constraints","Array","join","isBacktracking","isFilled","intersectingClues","points","i","point","other","across","down","contains","char","Error","oldConstraint","substr","numberClues","boxes","N","clues","currentClue","goThrough","j","BLACK","lengthen","singleLengthClues","filter","clue","forEach","row","b","c","actualClues","sort","c1","c2","updateConstraintsAndCheckIsValid","clearConstraints","clue2","a_intersect","charAt","d_intersect","setConstraint","solve","additionalWords","console","log","intersects","initForBackTracking","_loop","wordsByLength","w","concat","dictsByLength","fill","words","depth","n","unsolved","guess","find","add","word","rec","delete","index","Set","Mode","usedWords","constr","has","search","shouldBeBlack","WHITE","cloneAndremoveHighlight","clonedBoxes","cloneDeep","box","ACTIVE","Crossword","_this","nameInput","div","specialWords","editable","cursor","mode","SOLVE","event","_this2","rect","currentTarget","getBoundingClientRect","floor","clientX","left","clientY","top","setState","GRID","trySetIsAcrossAndHighlight","focus","possibleClues","getPoints","p","e","newMode","checked","_this3","pressedKey","toUpperCase","getNextPoint","visibility","size","clientWidth","offsetLeft","offsetTop","position","background","border","textAlign","_this4","ref","tabIndex","onClick","id","viewBox","xmlns","map","Square_Square","style","hideIfNotEditable","Switch_default","onChange","onToggleChange","index_es","onFillButtonClick","t","input","maxLength","onInputBoxChange","getHiddenBoxStyle","ignored","split","s","nonNullClues","App","apply","arguments","Crossword_Crossword","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4275a700.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Point } from './Crossword';\n\nexport type BoxProps = {\n    coords: Point\n    letter: string\n    clueNumber: string\n    fillType: SquareType\n}\n\nexport enum SquareType {\n    BLACK = \"blackSquare\",\n    WHITE = \"whiteSquare\",\n    ACTIVE = \"highlightSquare\",\n}\n\nexport const boxSize = 40;\n\nexport class Square extends Component<BoxProps, {}> {\n    pointToIdString(prefix:string) {\n        return prefix + this.props.coords.x + \"-\" + this.props.coords.y;\n    }\n    \n    constructor(props: BoxProps) {\n        super(props);\n    }\n\n    public render() {\n        let svgElements = [];\n        svgElements.push(\n            <rect\n                key={this.pointToIdString(\"box\")}\n                x={this.props.coords.x * boxSize}\n                y={this.props.coords.y * boxSize}\n                width={boxSize}\n                height={boxSize}\n                className={this.props.fillType}>\n            </rect>);\n        if (this.props.fillType) {\n            svgElements.push(\n                <text\n                    key={this.pointToIdString(\"text\")}\n                    x={(this.props.coords.x + 0.35) * boxSize}\n                    y={(this.props.coords.y + 0.65) * boxSize}\n                    className=\"clueText\">{this.props.letter}\n                </text>);\n            if (this.props.clueNumber != \"\") {\n                svgElements.push(\n                    <text\n                        key={this.pointToIdString(\"clue\")}\n                        x={this.props.coords.x * boxSize + 2}\n                        y={this.props.coords.y * boxSize + 10}\n                        className=\"clueNumber\">{this.props.clueNumber}\n                    </text>);\n            }\n        }\n        return (<g key={this.pointToIdString(\"group\")}>{svgElements}</g>);\n    }\n}\n","import {BoxProps, SquareType} from \"./Square\";\nimport {Point} from \"./Crossword\";\n\ntype ClueType = {\n    clueNumber: number,\n    start: Point,\n    length: number,\n    isAcross: boolean,\n}\n\ntype BacktrackingClueState = {\n    isBacktracking: boolean,\n    isFilled: boolean,\n    constraints: string,\n    intersectingClues: Array<Clue>,\n}\n\nexport class Clue {\n    clueNumber: number;\n    start: Point;\n    length: number;\n    isAcross: boolean;\n    state: BacktrackingClueState;\n\n    constructor(props: ClueType) {\n        this.clueNumber = props.clueNumber;\n        this.start = props.start;\n        this.length = props.length;\n        this.isAcross = props.isAcross;\n        let constraints = Array(props.length + 1).join(\".\");\n        this.state = {\n            isBacktracking: false,\n            isFilled: false,\n            constraints:constraints,\n            intersectingClues:[]};\n    }\n\n    lengthen() {\n        this.length++;\n        this.state.constraints += \".\";\n    }\n\n    public clearConstraints() {\n        this.state.constraints = Array(this.length+1).join('.');\n    }\n\n    public getPoints() {\n        let points = [];\n        for(let i=0; i<this.length; i++) {\n            if (this.isAcross) {\n                points.push({x:this.start.x + i, y:this.start.y});\n            } else {\n                points.push({x:this.start.x, y:this.start.y + i});\n            }\n        }\n        return points;\n    }\n\n    public contains(point: Point) {\n        if (this.isAcross) {\n            return (point.y == this.start.y) && (this.start.x <= point.x) && (point.x < this.start.x + this.length);\n        } else {\n            return (point.x == this.start.x) && (this.start.y <= point.y) && (point.y < this.start.y + this.length);\n        }\n    }\n\n    public intersects(other: Clue) {\n        if (other.isAcross == this.isAcross) {\n            return null;\n        }\n        let across = other.isAcross ? other : this;\n        let down = other.isAcross ? this : other;\n\n        let point = {x: down.start.x, y: across.start.y}\n        if (across.contains(point) && down.contains(point)) {\n            return point;\n        }\n        return null;\n    }\n\n    public setConstraint(i:number, char:string) {\n        if(char.length != 1 || i >= this.state.constraints.length) {\n            throw new Error(\n                \"chr length must be 1 and \" + i + \" < \" + this.state.constraints.length\n                + \" -- \" + this.start.x + \",\" + this.start.y + \"(\" + this.length + \")\" \n                + (this.isAcross? \"A\" : \"D\")); \n        }\n\n        let oldConstraint = this.state.constraints;\n        let oldN = oldConstraint.length;\n        this.state.constraints = oldConstraint.substr(0,i) + char + oldConstraint.substr(i+1);\n    }\n}\n\n\nexport function numberClues(boxes: Array<Array<BoxProps>>): Array<Clue> {\n    let N = boxes.length;\n    let clues : Array<Clue> = [];\n\n    let currentClue : Clue | null = null;\n\n    function goThrough(i: number, j: number, isAcross: boolean) {\n        if (i == N || j == N) {\n            if(currentClue != null) {\n                clues.push(currentClue)\n            }\n            currentClue = null;\n            return;\n        }\n        if(boxes[i][j].fillType != SquareType.BLACK) {\n            if (currentClue == null) {\n                currentClue = new Clue({start:{x:j, y:i}, isAcross: isAcross, length: 1, clueNumber: 0});\n            } else {\n                currentClue.lengthen();\n            }\n        } else {\n            if(currentClue != null) {\n                clues.push(currentClue)\n            }\n            currentClue = null;\n        }\n    }\n\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N; j++) {\n            boxes[i][j].clueNumber = \"\";\n        }\n    }\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N+1; j++) {\n            goThrough(i, j, true);\n        }\n    }\n\n    for(var i=0; i<N; i++) {\n        for(var j=0; j<N+1; j++) {\n            goThrough(j, i, false);\n        }\n    }\n    let singleLengthClues = clues\n        .filter(clue => clue.length == 1);\n    \n    boxes.forEach(row => row.forEach(b => {\n        // Boxes which are isolated in both directions should be blacked\n        if (singleLengthClues.filter(c=> c.start.x == b.coords.x && c.start.y == b.coords.y).length == 2) {\n            b.fillType = SquareType.BLACK;\n        }}));\n\n    let actualClues = clues.filter(clue => clue.length > 1)\n        .sort((c1,c2) => c1.start.x + N*c1.start.y - c2.start.x - c2.start.y*N);\n    \n    // Number the clues\n    let clueNumber = 0;\n    for (let i=0; i<actualClues.length; i++) {\n        let clue = actualClues[i];\n        if (boxes[clue.start.y][clue.start.x].clueNumber == \"\") {\n            clueNumber++;\n            boxes[clue.start.y][clue.start.x].clueNumber = \"\" + clueNumber;\n        }\n        clue.clueNumber = clueNumber;\n    }\n    return actualClues;\n}","import { Clue } from \"./Clue\";\nimport { words5 } from \"./words-5\";\n\nfunction updateConstraintsAndCheckIsValid(clues: Array<Clue>) {\n    for(let i=0; i<clues.length; i++) {\n        let clue = clues[i];\n        if (!clue.state.isFilled) {\n            clue.clearConstraints();\n        }\n        for(let j=0; j<clue.state.intersectingClues.length; j++) {\n            let clue2 = clue.state.intersectingClues[j];\n            if(!clue.state.isFilled && !clue2.state.isFilled) {\n                continue;\n            }\n            let across = clue.isAcross ? clue : clue2;\n            let down = clue.isAcross ? clue2 : clue;\n\n            let a_intersect = \n                across.state.constraints.charAt(down.start.x - across.start.x);\n            let d_intersect = \n                down.state.constraints.charAt(across.start.y - down.start.y);\n            if (!across.state.isFilled) {\n                across.setConstraint(down.start.x - across.start.x, d_intersect);\n            }\n            if (!down.state.isFilled) {\n                down.setConstraint(across.start.y - down.start.y,  a_intersect);\n            }\n            if (across.state.isFilled && down.state.isFilled && a_intersect != d_intersect) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\nfunction initForBackTracking(clues: Array<Clue>) {\n    console.log(\"InBacktr\");\n    for(let i=0; i<clues.length; i++) {\n        clues[i].clearConstraints();\n        clues[i].state.isBacktracking = true;\n        clues[i].state.isFilled = false;\n        clues[i].state.intersectingClues = [];\n    }\n\n    for(let i=0; i<clues.length; i++) {\n        for(let j=i+1; j<clues.length; j++) {\n            let c1 = clues[i];\n            let c2 = clues[j];\n            if (!c1.state || !c2.state) {\n                throw Error(\"Just set above\");\n            }\n            if (c1.intersects(c2)) {\n                c1.state.intersectingClues.push(c2);\n                c2.state.intersectingClues.push(c1);\n            }\n        }\n    }\n}\n\nexport function solve(clues : Array<Clue>, additionalWords: Array<string>) {\n    initForBackTracking(clues);\n    for (let i=2; i<=15; i++) {\n        wordsByLength[i] = additionalWords.filter(w => w.length == i).concat(dictsByLength[i]);\n    }\n    return fill(clues, new Set(), 0);\n}\n\nfunction fill(clues : Array<Clue>, words:Set<string>, depth:number): Array<Clue> | null {\n    if (depth > 40) {\n        throw new Error(\"Recursion depth\");\n    }\n    let n = clues.filter(c => c.state.isFilled).length;\n    console.log(\"Solved \" + n + \" of \" + clues.length);\n    let unsolved = clues.filter(c => !c.state.isFilled);\n\n\n    if (unsolved.length == 0) {\n        return clues;\n    }\n    \n    for (let i =0; i<unsolved.length; i++) {\n        let clue = unsolved[i];\n        let guess = find(clue, words, 0);\n        if (guess == null) {\n            return null;\n        }\n    }\n\n\n    for (let i=0; i<unsolved.length; i++) {\n        let clue = unsolved[i];\n        let guess = find(clue, words, 0);\n        while (guess != null) {\n            // TODO Make guess return index and guess to continue searches correctly\n            words.add(guess.word);\n            clue.state.constraints = guess.word;\n            clue.state.isFilled = true;\n            updateConstraintsAndCheckIsValid(clues);\n            let rec = fill(clues, words, depth + 1);\n            if (rec != null) {\n                return rec;\n            }\n            clue.state.isFilled = false;\n            words.delete(guess.word);\n            updateConstraintsAndCheckIsValid(clues);\n            guess = find(clue, words, guess.index+1);\n        }\n    }\n    return null;\n}\n\ntype Guess = {\n    index: number,\n    word: string,\n} | null;\n\nlet wordsByLength : Array<Array<string>> = Array(16);\nlet dictsByLength : Array<Array<string>> = Array(16);\nfor (let i=0; i<=15; i++) {\n    dictsByLength[i] = [];\n}\n\ndictsByLength[2] = [\n    \"BX\",\n    \"XD\",\n    \"BB\",\n    \"AC\",\n    \"CC\",\n    \"AB\",\n];\ndictsByLength[5] = words5;\n\nfunction find(clue:Clue, usedWords:Set<string>, start:number) : Guess {\n    let words = wordsByLength[clue.length];\n    for(let i=start; i <words.length; i++) {\n        if (usedWords.has(words[i])) {\n            continue;\n        }\n        if (matches(clue.state.constraints, words[i])) {\n            return {index: i, word:words[i]};\n        }\n    }\n    return null;\n}\n\nfunction matches(constr: string, word:string) {\n    return word.search(constr) != -1;\n}","import React, { Component, MouseEvent, CSSProperties } from 'react';\nimport { Square, boxSize, BoxProps, SquareType } from \"./Square\";\nimport {cloneDeep, floor} from 'lodash';\nimport Switch from '@material-ui/core/Switch';\nimport {numberClues, Clue} from './Clue';\nimport { Button, TextField } from '@material-ui/core';\nimport { solve } from './Backtrack';\n\nexport type Point = {\n    x: number,\n    y: number,\n}\n\nenum Mode {\n    SOLVE = \"SOLVE\",\n    GRID = \"GRID\",\n}\n\ntype State = {\n    boxes: Array<Array<BoxProps>>,\n    clues: Array<Clue>,\n    cursor: Point,\n    mode: Mode,\n    isAcross: boolean,\n};\n\nfunction shouldBeBlack(i:number, j:number) {\n    if (i%2 == 1 && j%2 == 1) {\n        return SquareType.BLACK;\n    } else {\n        return SquareType.WHITE;\n    }\n}\n\nconst N = 5;\n\ntype CrosswordProps = {\n    editable: boolean,\n}\n\nfunction cloneAndremoveHighlight(boxes: Array<Array<BoxProps>>) {\n    let clonedBoxes = cloneDeep(boxes);\n    clonedBoxes.forEach(row => row.forEach(box => {\n        if(box.fillType == SquareType.ACTIVE) {\n            box.fillType = SquareType.WHITE;\n        }\n    }));\n    return clonedBoxes;\n}\n\nexport class Crossword extends Component<CrosswordProps, State> {\n    nameInput: HTMLInputElement | null | undefined;\n    div: HTMLDivElement | null | undefined;\n    specialWords: HTMLTextAreaElement | null |  undefined;\n\n    public onClick(event: MouseEvent) {\n        let rect = event.currentTarget.getBoundingClientRect();\n        let x = floor(N * (event.clientX - rect.left) / rect.width);\n        let y = floor(N * (event.clientY - rect.top) / rect.height);\n        console.log(x + \", \" + y);\n        let point = {x: x, y: y};\n        this.setState(state => {\n            let clues = state.clues;\n            let clonedBoxes = cloneAndremoveHighlight(state.boxes);\n            let isAcross = state.isAcross;\n            if (state.mode == Mode.GRID) {\n                if (clonedBoxes[y][x].fillType == SquareType.BLACK) {\n                    clonedBoxes[y][x].fillType = SquareType.WHITE;\n                } else {\n                    clonedBoxes[y][x].fillType = SquareType.BLACK;\n                }\n                clues = numberClues(clonedBoxes);\n            } else {\n                isAcross = this.trySetIsAcrossAndHighlight(clonedBoxes, clues, state.isAcross, point);\n            }\n            return {boxes:clonedBoxes, cursor:point, clues: clues, isAcross: isAcross};\n        });\n        if (this.nameInput) {\n            this.nameInput.focus();\n        }\n    }\n\n    // Caller must set state using the new clonedBoxes\n    trySetIsAcrossAndHighlight(clonedBoxes:Array<Array<BoxProps>>, clues: Array<Clue>, isAcross: boolean, point: Point) {\n        let possibleClues = clues.filter(c => c.contains(point));\n                if (possibleClues.length > 2) {\n                    throw new Error(\"Should not be possible\");\n                } else if (possibleClues.length == 2) {\n                    let clue = possibleClues.filter(c => c.isAcross == isAcross)[0];\n                    clue.getPoints().forEach(\n                            p => {clonedBoxes[p.y][p.x].fillType = SquareType.ACTIVE;});\n                } else if (possibleClues.length == 1) {\n                    let clue = possibleClues[0];\n                    isAcross = clue.isAcross;\n                    clue.getPoints().forEach(\n                            p => {clonedBoxes[p.y][p.x].fillType = SquareType.ACTIVE;});\n                } else {\n                    console.log(\"No clues at this point\");\n                }\n                return isAcross;\n    }\n\n    getNextPoint(p: Point) {\n        if (p.x<0 || p.y < 0) {\n            return p;\n        }\n        if (this.state.isAcross) {\n            if (p.x < N-1) {\n                return {x: p.x+1, y: p.y};\n            } else {\n                return p;\n            }\n        } else {\n            if (p.y < N-1) {\n                return {x: p.x, y: p.y+1};\n            } else {\n                return p;\n            }\n        }\n    }\n\n    onToggleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        let newMode = !e.currentTarget.checked ? Mode.SOLVE : Mode.GRID;\n        this.setState(state => {\n            return {mode: newMode, boxes: cloneAndremoveHighlight(state.boxes)}; });\n    }\n\n    onInputBoxChange() {\n        let x = this.state.cursor.x;\n        let y = this.state.cursor.y;\n        if (x < 0 || y < 0 || this.state.boxes[y][x].fillType == SquareType.BLACK || !this.nameInput) {\n            console.log(\"Ignoring changeEvent\");\n            return;\n        }\n\n        let pressedKey = this.nameInput.value;\n        pressedKey = pressedKey.toUpperCase();\n        if (pressedKey > 'Z' || pressedKey < 'A') {\n            console.log(\"Ignoring key \" + pressedKey);\n            return;\n        }\n        this.setState(state => {\n            let clonedBoxes = cloneDeep(state.boxes);\n            clonedBoxes[state.cursor.y][state.cursor.x].letter = pressedKey;\n            return {boxes:clonedBoxes, cursor: this.getNextPoint(state.cursor)};\n        });\n    }\n\n    constructor(props: CrosswordProps) {\n        super(props);\n        if (!props.editable) {\n            console.log(\"To implmenet loading crossword later\");\n        }\n\n        let boxes = [];\n        for (var i = 0; i < N; i++) {\n            let row = []\n            for (var j = 0; j < N; j++) {\n                row.push({\n                    fillType: shouldBeBlack(i,j),\n                    letter: \"\",\n                    coords: {y: i, x: j},\n                    clueNumber:\"\"});\n            }\n            boxes.push(row);\n        }\n        this.state = { \n            boxes: boxes,\n            clues: numberClues(boxes),\n            cursor:{x: -1, y: -1}, \n            mode: Mode.SOLVE, \n            isAcross: true};\n    }\n\n    getHiddenBoxStyle() : CSSProperties {\n        if(!this.div || this.state.mode == Mode.GRID) {\n            return {\n                visibility: \"collapse\",\n            };\n        }\n        let size = this.div.clientWidth;\n        return {\n            left: this.div.offsetLeft + size * (this.state.cursor.x / N),\n            top: this.div.offsetTop + size * (this.state.cursor.y / N),\n            width: size / N,\n            height: size/ N,\n            position: \"absolute\",\n            background: \"transparent\",\n            border: \"none\",\n            textAlign: \"center\",\n         }\n    }\n\n    hideIfNotEditable() : CSSProperties {\n        if(!this.props.editable) {\n            return {\n                visibility: \"collapse\",\n            };\n        }\n        return {\n            visibility: \"visible\",\n        };\n    }\n\n    render() {\n        console.log(\"Render Crossword\");\n        return (\n        <div ref={div => {this.div = div;}} className=\"crossword\" tabIndex={0}>\n            <svg \n                onClick={e => this.onClick(e)}\n                id=\"crossword-svg\" viewBox={\"0 0 \" + N*boxSize + \" \" + N*boxSize} xmlns=\"http://www.w3.org/2000/svg\">\n                {this.state.boxes.map((row) => (\n                    row.map((b) => {\n                    return <Square \n                        key={b.coords.x + \"-\" + b.coords.y}\n                        fillType={b.fillType}\n                        coords={b.coords}\n                        letter={b.letter}\n                        clueNumber={b.clueNumber} />\n                    })\n                ))}\n            </svg>\n            <div style={this.hideIfNotEditable()}>\n                Edit Grid<Switch value=\"Edit\" onChange={e => this.onToggleChange(e)}/>\n                <Button onClick={e => this.onFillButtonClick(e)}>Fill</Button>\n                <br/>\n                <textarea className=\"extraWords\" ref={t => {this.specialWords = t;}} />\n            </div>\n            <input value=\"\" ref={input => {this.nameInput = input;}} \n            maxLength={1} \n            onClick={e => {this.setState(state => {\n                let clonedBoxes = cloneAndremoveHighlight(state.boxes);\n                let isAcross = this.trySetIsAcrossAndHighlight(\n                    clonedBoxes, state.clues, !state.isAcross, state.cursor);\n                return {isAcross: isAcross, boxes:clonedBoxes}})\n            }}\n            onChange={e => this.onInputBoxChange()} \n            style={this.getHiddenBoxStyle()}/>\n            <div>\n                Across\n                <ul className=\"clueList\">\n                    {this.state.clues.filter(c=> c.isAcross).map(c => {\n                        return <li key={c.clueNumber + \" \" + c.isAcross}>{c.clueNumber}. {c.state.constraints} ({c.length})</li>\n                    })}\n                </ul>\n            </div>\n            <div>\n                Down\n                <ul className=\"clueList\">\n                    {this.state.clues.filter(c=> !c.isAcross).map(c => {\n                        return <li key={c.clueNumber + \" \" + c.isAcross}>{c.clueNumber}. {c.state.constraints} ({c.length})</li>\n                    })}\n                </ul>\n            </div>\n        </div>);\n    }\n\n    onFillButtonClick(ignored: any) {\n        let additionalWords : Array<string> = [];\n        if (this.specialWords) {\n            new Set(this.specialWords.value.toUpperCase().split(/[^A-Z]/)).forEach(s => additionalWords.push(s));\n        }\n        let clues = solve(this.state.clues, additionalWords);\n        if(clues != null) {\n            let nonNullClues = clues\n            let clonedBoxes = cloneAndremoveHighlight(this.state.boxes);\n            for(let i=0; i<N; i++) {\n                for(let j=0; j<N; j++) {\n                    clonedBoxes[i][j].letter = \"\";\n                }\n            }\n            clues.forEach(\n                clue => {\n                    for (let i=0; i<clue.length; i++) {\n                        if(!clue.state.isFilled) {\n                            continue;\n                        }\n                        if(clue.isAcross) {\n                            clonedBoxes[clue.start.y][clue.start.x + i].letter = clue.state.constraints.charAt(i);\n                        } else {\n                            clonedBoxes[clue.start.y + i][clue.start.x].letter = clue.state.constraints.charAt(i);\n                        }\n                    }\n                }\n            )\n            this.setState(state => {\n                return {boxes: clonedBoxes, clues: nonNullClues}\n            });\n        } else {\n            console.log(\"No solution!\");\n        }\n    }\n}\n\nexport default Crossword;","export const words5 = [\n\"AAAAA\", \n\"ABBBB\", \n\"ACCCC\", \n\"ADDDD\", \n\"BXCXD\", \n\"BYCYD\",\n]","import React, { Component } from 'react';\nimport './App.css';\nimport { Crossword } from './Crossword';\n\nexport class App extends Component {\n  render() {\n    return (<div className=\"container\">\n      <Crossword editable={true}/>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}